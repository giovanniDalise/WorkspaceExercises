Interface PreparedStatement

package: java.sql

Descrizione:
An object that represents a precompiled SQL statement.
A SQL statement is precompiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.

Note: The setter methods (setShort, setString, and so on) for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. For instance, if the IN parameter has SQL type INTEGER, then the method setInt should be used.

If arbitrary parameter type conversions are required, the method setObject should be used with a target SQL type.

In the following example of setting a parameter, con represents an active connection:

   PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
                                     SET SALARY = ? WHERE ID = ?");
   pstmt.setBigDecimal(1, 153833.00)
   pstmt.setInt(2, 110592)

METODI:
addBatch()
Adds a set of parameters to this PreparedStatement object's batch of commands.

clearParameters()
Clears the current parameter values immediately.

execute()
Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement.

getMetaData()
Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed.

setBlob(int parameterIndex, Blob x)
Sets the designated parameter to the given java.sql.Blob object.

setBoolean(int parameterIndex, boolean x)
Sets the designated parameter to the given Java boolean value.

setBytes(int parameterIndex, byte[] x)
Sets the designated parameter to the given Java array of bytes.

setCharacterStream(int parameterIndex, Reader reader)
Sets the designated parameter to the given Reader object.